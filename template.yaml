AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: sam-apigateway-authorizer
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
    GoogleClientId:
        Type: String
        Description: Google OAuth Client ID
    GoogleClientSecret:
        Type: String
        Description: Google OAuth Client Secret
    Environment:
        Type: String
        Default: dev
        AllowedValues:
            - dev
            - stage
            - prod
        Description: The environment to deploy (dev, stage or prod)
Mappings:
    EnvironmentMapping:
        dev:
            UserTableName: UserTableDev
            UserPoolName: UserPoolDev
            VideoBucketName: fighter-circle-user-video-dev
        stage:
            UserTableName: UserTableStage
            UserPoolName: UserPoolDev
            VideoBucketName: fighter-circle-user-video-stage
        prod:
            UserTableName: UserTable
            UserPoolName: UserPool
            VideoBucketName: fighter-circle-user-video

# Conditions:
#     IsProd:
#         Fn::Equals: [!Ref Environment, prod]
#     IsStage:
#         Fn::Equals: [!Ref Environment, stage]
#     IsDev:
#         Fn::Equals: [!Ref Environment, dev]
Globals:
    Function:
        Timeout: 3
        MemorySize: 128

        # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
        LoggingConfig:
            LogFormat: JSON
        Environment:
            Variables:
                USER_TABLE_NAME: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]

Resources:
    ApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Ref Environment
            Cors: "'*'"
            Auth:
                DefaultAuthorizer: CognitoAuthorizer
                Authorizers:
                    CognitoAuthorizer:
                        UserPoolArn: !GetAtt UserPool.Arn
    # 動作確認用で残す
    HelloWorldFunction:
        Type: AWS::Serverless::Function
        Metadata: &CommonFunctionMetadata
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                KeepNames: true
                Target: 'es2020'
        Properties:
            CodeUri: src/handlers
            Handler: app.lambdaHandler
            Runtime: nodejs20.x
            Architectures:
                - x86_64
            Events:
                Hello:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /hello
                        Method: get
    UserFunction:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            CodeUri: src/handlers
            Handler: index.lambdaHandler
            Runtime: nodejs20.x
            Architectures:
                - x86_64
            # Policies:
            #     DynamoDBCrudPolicy:
            #         TableName: !Ref SampleTable
            Events:
                ItemCreate:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items
                        Method: post
                ItemsRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items
                        Method: get
                ItemByIdRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items/{id}
                        Method: get
                ItemDeleteById:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items/{id}
                        Method: delete
                UserCreate:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users
                        Method: post
                UserByIdRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}
                        Method: get
    AuthFunction:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            CodeUri: src/handlers
            Handler: index.lambdaHandler
            Runtime: nodejs20.x
            Architectures:
                - x86_64
            Events:
                AuthSignUp:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /auth/sign_up
                        Method: post
    UserVideoFunction:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            CodeUri: src/handlers
            Handler: index.lambdaHandler
            Runtime: nodejs20.x
            Architectures:
                - x86_64
            Events:
                UserVideoRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos
                        Method: get
                UserVideoCreate:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos
                        Method: post
                UserVideoByIdRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos/{user_video_id}
                        Method: get
                UserVideoCountIncrementById:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos/{user_video_id}/increment
                        Method: put

    UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !FindInMap [EnvironmentMapping, !Ref Environment, UserPoolName]
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: false
                UnusedAccountValidityDays: 7
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireUppercase: true
            UsernameAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Schema:
                - Name: email
                  AttributeDataType: String
                  Required: true
                  Mutable: true
    UserPoolDomain:
        Type: AWS::Cognito::UserPoolDomain
        Properties:
            UserPoolId: !Ref UserPool
            Domain: test-next-auth-sample
    UserPoolAppClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: web_app
            UserPoolId: !Ref UserPool
            ExplicitAuthFlows:
                - ALLOW_USER_SRP_AUTH
                - ALLOW_ADMIN_USER_PASSWORD_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
            # refreshTokenの期限を1年間にする
            TokenValidityUnits:
                AccessToken: days
                IdToken: days
                RefreshToken: days
            RefreshTokenValidity: 365
            # GenerateSecretはNextAuthの利用で必須
            # 初回作成時はなぜか失敗するので、再度Deployをし直す必要がある
            GenerateSecret: true
            AllowedOAuthFlowsUserPoolClient: true
            AllowedOAuthFlows:
                - code
            AllowedOAuthScopes:
                - email
                - openid
                - profile
            SupportedIdentityProviders:
                - Google
                - COGNITO
            CallbackURLs:
                - http://localhost:8080/api/auth/callback/cognito
    UserPoolIdentityProviderGoogle:
        Type: AWS::Cognito::UserPoolIdentityProvider
        Properties:
            ProviderName: Google
            ProviderType: Google
            UserPoolId: !Ref UserPool
            ProviderDetails:
                client_id: !Ref GoogleClientId
                client_secret: !Ref GoogleClientSecret
                authorize_scopes: 'openid email profile'
            AttributeMapping:
                email: email
                email_verified: email_verified
                preferred_username: name
                picture: picture
    UserVideoS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !FindInMap [EnvironmentMapping, !Ref Environment, VideoBucketName]
            CorsConfiguration:
                CorsRules:
                    - AllowedHeaders:
                          - '*'
                      AllowedMethods:
                          - HEAD
                          - GET
                          - PUT
                          - POST
                          - DELETE
                      AllowedOrigins:
                          - '*'
                      ExposedHeaders:
                          - ETag
            LifecycleConfiguration:
                Rules:
                    - Status: 'Enabled'
                      AbortIncompleteMultipartUpload:
                          DaysAfterInitiation: 1
    # UserRegisterTriggerLambda:
    #     Type: AWS::Serverless::Function
    #     Properties:
    #         CodeUri: src/triggers/user_register
    #         Handler: index.lambdaHandler
    #         Runtime: nodejs20.x
    #         Policies:
    #             - DynamoDBCrudPolicy:
    #                   TableName: !Ref UserTable

    #         Environment:
    #             Variables:
    #                 TABLE_NAME: !FindInMap [EnvironmentMapping, !Ref Environment, TableName]
    #         Events:
    #             UserRegister:
    #                 Type: Cognito
    #                 Properties:
    #                     UserPool: !Ref UserPool
    #                     Trigger: PostConfirmation
    # UserTable:
    #     Type: AWS::DynamoDB::Table
    #     Properties:
    #         TableName: !FindInMap [EnvironmentMapping, !Ref Environment, TableName]
    #         AttributeDefinitions:
    #             - AttributeName: pk
    #               AttributeType: S
    #             - AttributeName: sk
    #               AttributeType: S
    #             - AttributeName: createdAt
    #               AttributeType: S
    #             # Define other attributes here as needed
    #         KeySchema:
    #             - AttributeName: pk
    #               KeyType: HASH
    #             - AttributeName: sk
    #               KeyType: RANGE
    #         LocalSecondaryIndexes:
    #             - IndexName: CreatedAtIndex
    #               KeySchema:
    #                   - AttributeName: pk
    #                     KeyType: HASH
    #                   - AttributeName: createdAt
    #                     KeyType: RANGE
    #               Projection:
    #                   ProjectionType: ALL
    #         BillingMode: PAY_PER_REQUEST

Outputs:
    # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
    # Find out more about other implicit resources you can reference within SAM
    # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
    ApiGateway:
        Description: API Gateway endpoint URL for Prod stage for Hello World function
        Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    UserFunction:
        Description: Hello World Lambda Function ARN
        Value: !GetAtt UserFunction.Arn
    UserPoolId:
        Description: UserPool ID
        Value: !Ref UserPool
    UserPoolAppClientId:
        Description: App Client ID
        Value: !Ref UserPoolAppClient
    UserPoolAppClientSecret:
        Description: App client secret for the User Pool App Client
        Value: !GetAtt UserPoolAppClient.ClientSecret
    UserPoolIdentityProviderGoogle:
        Description: Google Congnito Provider ID
        Value: !Ref UserPoolIdentityProviderGoogle
    UserVideoS3BucketName:
        Description: User Video Content Bucket Name
        Value: !Ref UserVideoS3Bucket

    # UserRegisterTriggerLambda:
    #     Description: User Register Trigger Lambda ID
    #     Value: !Ref UserRegisterTriggerLambda

    # SampleTable:
    #     Description: Sample Dynamodb Table
    #     Value: !Ref SampleTable
