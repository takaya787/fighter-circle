AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: fighter-circle aws sam template
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Output:確認command
# aws cloudformation describe-stacks --stack-name fighter-circle-dev --query "Stacks[0].Outputs"

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: Common setting
              Parameters:
                  - GoogleClientId
                  - GoogleClientSecret
                  - Environment
                  - SystemName
            - Label:
                  default: MediaConvert setting
              Parameters:
                  - EndPointUrl

Parameters:
    GoogleClientId:
        Type: String
        Description: Google OAuth Client ID
    GoogleClientSecret:
        Type: String
        Description: Google OAuth Client Secret
    Environment:
        Type: String
        Default: dev
        AllowedValues:
            - dev
            - stage
            - prod
        Description: The environment to deploy (dev, stage or prod)
    SystemName:
        Type: String
        Default: fighter-circle
    EndPointUrl:
        Type: String
        Default: https://mpazqbhuc.mediaconvert.ap-northeast-1.amazonaws.com
Mappings:
    EnvironmentMapping:
        dev:
            # devではlocalのDynamoDBを利用する
            UserTableName: UserTableDev
            UserPoolName: UserPoolDev
            CoginitoClientDomain: fighter-circle-dev
            CorsAllowOrigin: "'http://localhost:8080'"
        stage:
            UserTableName: UserTableStage
            UserPoolName: UserPoolStage
            CoginitoClientDomain: fighter-circle-stage
            CorsAllowOrigin: "'http://localhost:8080'"
        prod:
            UserTableName: UserTable
            UserPoolName: UserPool
            CoginitoClientDomain: fighter-circle
            CorsAllowOrigin: "'https://master.dh57he0tjj5rg.amplifyapp.com'"
Conditions:
    IsProd:
        Fn::Equals: [!Ref Environment, prod]
    # IsStage:
    #     Fn::Equals: [!Ref Environment, stage]
    IsDev:
        Fn::Equals: [!Ref Environment, dev]

Globals:
    Api:
        Cors:
            AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
            AllowHeaders: "'*'"
            AllowOrigin: !FindInMap [EnvironmentMapping, !Ref Environment, CorsAllowOrigin]
            AllowCredentials: true
    Function:
        Timeout: 180
        MemorySize: 128
        Runtime: nodejs20.x
        Architectures:
            - x86_64
        CodeUri: src/handlers
        # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
        LoggingConfig:
            LogFormat: JSON
        Environment:
            Variables:
                USER_TABLE_NAME: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
                ENVIRONMENT: !Ref Environment
                INPUT_USER_VIDEO_BUCKET_NAME: !Sub ${SystemName}-user-video-input-${Environment}
                OUTPUT_USER_VIDEO_BUCKET_NAME: !Sub ${SystemName}-user-video-output-${Environment}

Resources:
    ApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Ref Environment
            Auth:
                DefaultAuthorizer: CognitoAuthorizer
                Authorizers:
                    CognitoAuthorizer:
                        UserPoolArn: !GetAtt UserPool.Arn
    # 動作確認用で残す
    # cloud watchのlogを追加する
    HelloWorldFunction:
        Type: AWS::Serverless::Function
        Metadata: &CommonFunctionMetadata
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                KeepNames: true
                Target: 'es2020'
        Properties:
            Handler: app.lambdaHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
            Events:
                Hello:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /hello
                        Method: get
    UserFunction:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            Handler: index.lambdaHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
            Events:
                ItemCreate:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items
                        Method: post
                ItemsRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items
                        Method: get
                ItemByIdRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items/{id}
                        Method: get
                ItemDeleteById:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /items/{id}
                        Method: delete
                UserCreate:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users
                        Method: post
                UserByIdRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}
                        Method: get
    AuthFunction:
        Type: AWS::Serverless::Function
        Condition: IsDev
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
            Handler: index.lambdaHandler
            Events:
                AuthSignUp:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /auth/sign_up
                        Method: post
    UserVideoFunction:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
            Handler: index.lambdaHandler
            Events:
                UserVideoFeed:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /user_videos
                        Method: get
                UserVideoRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos
                        Method: get
                UserVideoCreate:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos
                        Method: post
                UserVideoByIdRead:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos/{user_video_id}
                        Method: get
                UserVideoCountIncrementById:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /users/{user_id}/user_videos/{user_video_id}/increment
                        Method: put
    VideoUploadFunction:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            Policies:
                - S3CrudPolicy:
                      BucketName: !Sub ${SystemName}-user-video-input-${Environment}
                - S3ReadPolicy:
                      BucketName: !Sub ${SystemName}-user-video-output-${Environment}
            Handler: index.lambdaHandler
            Events:
                VideoUploadPrepare:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /upload/videos/prepare
                        Method: post
                VideoUploadComplete:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ApiGateway
                        Path: /upload/videos/complete
                        Method: post

    UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !FindInMap [EnvironmentMapping, !Ref Environment, UserPoolName]
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: false
                UnusedAccountValidityDays: 7
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireUppercase: true
            UsernameAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Schema:
                - Name: email
                  AttributeDataType: String
                  Required: true
                  Mutable: true
            LambdaConfig:
                PostConfirmation: !GetAtt UserPostConfirmationTriggerLambda.Arn
    UserPoolDomain:
        Type: AWS::Cognito::UserPoolDomain
        Properties:
            UserPoolId: !Ref UserPool
            Domain: !FindInMap [EnvironmentMapping, !Ref Environment, CoginitoClientDomain]
    UserPoolAppClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: web_app
            UserPoolId: !Ref UserPool
            ExplicitAuthFlows:
                - ALLOW_USER_SRP_AUTH
                - ALLOW_ADMIN_USER_PASSWORD_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
            # refreshTokenの期限を1年間にする
            TokenValidityUnits:
                AccessToken: days
                IdToken: days
                RefreshToken: days
            RefreshTokenValidity: 365
            # GenerateSecretはNextAuthの利用で必須
            # 初回作成時はなぜか失敗するので、再度Deployをし直す必要がある
            GenerateSecret: true
            AllowedOAuthFlowsUserPoolClient: true
            AllowedOAuthFlows:
                - code
            AllowedOAuthScopes:
                - email
                - openid
                - profile
            SupportedIdentityProviders:
                - Google
                - COGNITO
            CallbackURLs:
                Fn::If:
                    - IsProd
                    - [https://master.dh57he0tjj5rg.amplifyapp.com/api/auth/callback/cognito]
                    - [http://localhost:8080/api/auth/callback/cognito]
    UserPoolIdentityProviderGoogle:
        Type: AWS::Cognito::UserPoolIdentityProvider
        Properties:
            ProviderName: Google
            ProviderType: Google
            UserPoolId: !Ref UserPool
            ProviderDetails:
                client_id: !Ref GoogleClientId
                client_secret: !Ref GoogleClientSecret
                authorize_scopes: 'openid email profile'
            AttributeMapping:
                email: email
                email_verified: email_verified
                preferred_username: name
                picture: picture
    UserPoolPostConfirmationTriggerPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt UserPostConfirmationTriggerLambda.Arn
            Principal: cognito-idp.amazonaws.com
            SourceArn: !GetAtt UserPool.Arn
    UserPostConfirmationTriggerLambda:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
            FunctionName: !Sub ${SystemName}-${Environment}-user-post-confirmation-trigger
            Description: Trigger Function for User Cognito Post Confirmation
            CodeUri: src/jobs/user_post_confirmation
            Handler: app.lambdaHandler
            # Environment:
            #     Variables:
            #         ENVIRONMENT: !Ref Environment
    UserVideoInputS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub ${SystemName}-user-video-input-${Environment}
            CorsConfiguration:
                CorsRules:
                    - AllowedHeaders:
                          - '*'
                      AllowedMethods:
                          - HEAD
                          - GET
                          - PUT
                          - POST
                          - DELETE
                      AllowedOrigins:
                          - '*'
                      ExposedHeaders:
                          - ETag
            LifecycleConfiguration:
                Rules:
                    - Status: 'Enabled'
                      AbortIncompleteMultipartUpload:
                          DaysAfterInitiation: 1
                    - Status: 'Enabled'
                      ExpirationInDays: 7
    UserVideoOutputS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub ${SystemName}-user-video-output-${Environment}
            PublicAccessBlockConfiguration:
                BlockPublicAcls: True
                BlockPublicPolicy: True
                IgnorePublicAcls: True
                RestrictPublicBuckets: True
    UserVideoOutputS3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            PolicyDocument:
                Id: UserVideoOutputS3BucketPolicy
                Version: '2012-10-17'
                Statement:
                    - Sid: CloudFrontDistributionAccess
                      Effect: Allow
                      Principal:
                          Service: cloudfront.amazonaws.com
                      Action: 's3:GetObject'
                      Resource: !Sub ${UserVideoOutputS3Bucket.Arn}/*
                      Condition:
                          StringEquals:
                              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
            Bucket: !Ref UserVideoOutputS3Bucket
    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Origins:
                    - Id: S3Origin
                      DomainName: !GetAtt UserVideoOutputS3Bucket.DomainName
                      OriginAccessControlId: !GetAtt CloudFrontOriginAccessControll.Id
                      S3OriginConfig:
                          OriginAccessIdentity: ''
                Enabled: true
                DefaultCacheBehavior:
                    TargetOriginId: S3Origin
                    ViewerProtocolPolicy: redirect-to-https
                    AllowedMethods:
                        - GET
                        - HEAD
                    CachedMethods:
                        - GET
                        - HEAD
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    Compress: true
                ViewerCertificate:
                    CloudFrontDefaultCertificate: true
    CloudFrontOriginAccessControll:
        Type: AWS::CloudFront::OriginAccessControl
        Properties:
            OriginAccessControlConfig:
                Description: Access Control
                Name: !Sub OAC-${SystemName}-${Environment}
                OriginAccessControlOriginType: s3
                SigningBehavior: always
                SigningProtocol: sigv4

    # ------------------------------------------------------------#
    # Dynamo DB
    # ------------------------------------------------------------#
    UserTable:
        Type: AWS::DynamoDB::Table
        Condition: IsProd
        Properties:
            TableName: !FindInMap [EnvironmentMapping, !Ref Environment, UserTableName]
            AttributeDefinitions:
                - AttributeName: pk
                  AttributeType: S
                - AttributeName: sk
                  AttributeType: S
                - AttributeName: dynamodeEntity
                  AttributeType: S
                - AttributeName: gsi_sk_1
                  AttributeType: S
            KeySchema:
                - AttributeName: pk
                  KeyType: HASH
                - AttributeName: sk
                  KeyType: RANGE
            LocalSecondaryIndexes:
                - IndexName: local-created-index
                  KeySchema:
                      - AttributeName: pk
                        KeyType: HASH
                      - AttributeName: gsi_sk_1
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL
            GlobalSecondaryIndexes:
                - IndexName: dynamode-index
                  KeySchema:
                      - AttributeName: dynamodeEntity
                        KeyType: HASH
                      - AttributeName: gsi_sk_1
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
            # DeletionProtectionEnabled: !If [IsProd, true, false]
            DeletionProtectionEnabled: false

    # ------------------------------------------------------------#
    # Media Convert Lambda
    # ------------------------------------------------------------#
    MediaConvertTriggerLambda:
        Type: AWS::Serverless::Function
        Metadata:
            <<: *CommonFunctionMetadata
        Properties:
            FunctionName: !Sub ${SystemName}-start-media-convert-job-${Environment}
            Description: Trigger Function for Elemental MediaConvert
            CodeUri: src/jobs/start_media_convert
            Handler: app.lambdaHandler
            MemorySize: 512
            Role: !GetAtt MediaConvertTriggerLambdaRole.Arn
            Environment:
                Variables:
                    ENDPOINT_URL: !Ref EndPointUrl
                    OUTPUT_BUCKET: !Ref UserVideoOutputS3Bucket
                    MEDIA_CONVERT_JOB_TEMPLATE_ARN: !GetAtt MediaConvertJobTemplate.Arn
                    MEDIA_CONVERT_ROLE_ARN: !GetAtt MediaConvertServiceRole.Arn
                    MEDIA_CONVERT_QUE: !Sub arn:aws:mediaconvert:ap-northeast-1:${AWS::AccountId}:queues/${SystemName}-${Environment}
            Events:
                S3Event:
                    Type: S3
                    Properties:
                        Bucket: !Ref UserVideoInputS3Bucket
                        Events: s3:ObjectCreated:*
    # ------------------------------------------------------------#
    # IAM For MediaConvert
    # ------------------------------------------------------------#
    MediaConvertTriggerLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${SystemName}-trigger-lambda-role-${Environment}
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - !Ref MediaConvertJobExecutePolicy
    MediaConvertJobExecutePolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            ManagedPolicyName: !Sub ${SystemName}-media-convert-execute-policy-${Environment}
            Path: /
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:Get*
                          - s3:List*
                      Resource:
                          - !Sub arn:aws:s3:::${SystemName}-user-video-input-${Environment}/*
                    - Effect: Allow
                      Action:
                          - iam:PassRole
                          - mediaconvert:CreateJob
                      Resource: '*'
    MediaConvertServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${SystemName}-media-convert-role-${Environment}
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - mediaconvert.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /service-role/
            ManagedPolicyArns:
                - !Ref MediaConvertJobPolicy
    MediaConvertJobPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            ManagedPolicyName: !Sub ${SystemName}-media-convert-policy-${Environment}
            Path: /
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Resource:
                          - !Sub arn:aws:s3:::${SystemName}-user-video-input-${Environment}/*
                      Action:
                          - s3:Get*
                          - s3:List*
                    - Effect: Allow
                      Resource:
                          - !Sub arn:aws:s3:::${SystemName}-user-video-output-${Environment}/*
                      Action:
                          - s3:Put*
    # ------------------------------------------------------------#
    # MediaConvert
    # ------------------------------------------------------------#
    MediaConvertJobTemplate:
        Type: AWS::MediaConvert::JobTemplate
        Properties:
            Name: !Sub ${SystemName}-media-convert-job-template-${Environment}
            Category: MP4
            Description: Job template for converting uploaded video to mp4
            SettingsJson:
                Fn::Transform:
                    Name: AWS::Include
                    Parameters:
                        Location: src/jobs/start_media_convert/job_settings.json
Outputs:
    StackName:
        Description: The name of this stack
        Value: !Ref AWS::StackName
    Environment:
        Description: The environment for this stack
        Value: !Ref Environment
    ApiGateway:
        Description: API Gateway endpoint URL for Prod stage for Hello World function
        Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    UserPoolId:
        Description: UserPool ID
        Value: !Ref UserPool
    UserPoolAppClientId:
        Description: App Client ID
        Value: !Ref UserPoolAppClient
    UserPoolAppClientSecret:
        Condition: IsDev
        Description: App client secret for the User Pool App Client
        Value: !GetAtt UserPoolAppClient.ClientSecret
    UserVideoInputS3BucketName:
        Description: User Video Content Input Bucket Name
        Value: !Ref UserVideoInputS3Bucket
    UserVideoOutputS3BucketName:
        Description: User Video Content Output Bucket Name through AWS Elemental MediaConvert
        Value: !Ref UserVideoOutputS3Bucket
    UserTableName:
        Condition: IsProd
        Description: User Table Name only in production
        Value: !Ref UserTable
    CloudFrontUrl:
        Description: Access url for the CloudFront distribution
        Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    MediaConvertTriggerLambdaName:
        Description: Media Convert Trigger Lambda Function Event by S3
        Value: !Ref MediaConvertTriggerLambda
